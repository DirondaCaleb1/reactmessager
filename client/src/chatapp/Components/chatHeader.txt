AiFillNotification,

 if (peerConnection) {
        socket.current.on("emit-call-operation", (data) => {
          console.log(data);

          //Getting our audio (and video)

          navigator.mediaDevices
            .getUserMedia({
              audio: true,
              video: false,
            })
            .then((stream) => {
              myStreamRef.current = stream;

              //Storing our audio (or video)
              let currentMyVideoRef = myVideoRef.current;

              if (currentMyVideoRef) {
                currentMyVideoRef.srcObject = stream;
              }
            })
            .catch((err) => {
              //Handle Error
              console.log(err);
            });

          myStreamRef.current.getTracks().forEach((element) => {
            //Storing the stream of the host in the peerConnection
            //peerConnection
            //peerConnection.addTrack(element, myStreamRef.current);
          });
          //Creating offer
          /*peerConnection
              .createOffer()
              .then((offer) => {
                peerConnection.setLocalDescription(offer);

                //Sending the offer to the server
                socket.current.emit("offer", offer, data.from);
              })
              .catch((err) => {
                console.log(err);
              });*/
        });

        socket.current.on("answer", (answer) => {
          console.log("receiving answer to the host", answer);
          //UseRef of connection of
          /*peerConnection.setRemoteDescription(answer).catch((err) => {
            console.log(err);
          });*/
        });

        /*socket.current.on("ice-candidate", (incomingIce) => {
          console.log(
            "receiving new icecandidate for other user send the icecandiate",
            incomingIce
          );

          const candidate = new RTCIceCandidate(incomingIce);
          console.log(candidate);
           peerConnection.addIceCandidate(candidate).catch((err) => {
             console.log(err);
           });
        });*/
      }




      document.onmouseover = function () {
    //User's mouse is inside the page.
    window.innerDocClick = true;
  };

  document.onmouseleave = function () {
    //User's mouse has left the page.
    window.innerDocClick = false;
  };

  window.onhashchange = function () {
    if (window.innerDocClick) {
      //Your own in-page mechanism triggered the hash change
      alert("hi Inner");
    } else {
      //Browser back button was clicked
      alert("Back window");
    }
  };

  window.addEventListener(
    "popstate",
    function (event) {
      // The popstate event is fired each time when the current history entry changes.

      //var r = this.window.confirm("You pressed a Back button! Are you sure?!");
      let r = this.window.confirm("You pressed a Back button! Are you sure?!");

      if (r === true) {
        // Call Back button programmatically as per user confirmation.
        this.window.history.back();
        // Uncomment below line to redirect to the previous page instead.
        // window.location = document.referrer // Note: IE11 is not supporting this.
      } else {
        // Stay on the current page.
        this.window.history.pushState(
          null,
          null,
          this.window.location.pathname
        );
      }

      this.window.history.pushState(null, null, this.window.location.pathname);
    },
    false
  );


  //const errorHandler = errorHandlerByVideoAbsent();
    /* 

    if (!errorHandler) {
      dispatch({
        type: reducerCases.SET_VIDEO_CALL,
        videoCall: {
          ...incomingVideoCall,
          type: "in-coming",
        },
      });

      socket.current.emit("accept-incoming-call", {
        id: incomingVoiceCall.id,
        to: myUserInfo?.id,
        callType: "video",
      });

      dispatch({
        type: reducerCases.SET_INCOMING_VIDEO_CALL,
        incomingVideoCall: undefined,
      });
    } else {
      notification.error({
        message: errorMessageAccept,
      });
      dispatch({
        type: reducerCases.SET_INCOMING_VIDEO_CALL,
        incomingVideoCall: undefined,
      });
    }

    //-byerror

      //if (ringingCall) {
        //ringingCall.pause();
      //}
      */
  